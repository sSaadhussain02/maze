

def DFS(m,start=None):

    # if start is None:
    start=(m.rows,m.cols)
    explored=[start]
    frontier=[start]
    dfsPath={}
    dSearch=[]
    while len(frontier)>0:
        currCell=frontier.pop()
        dSearch.append(currCell)
        if currCell==(1,1):
            break
        for d in 'ESNW':
            if m.maze_map[currCell][d]==True:
                if d=='E':
                    childCell=(currCell[0],currCell[1]+1)
                elif d=='W':
                    childCell=(currCell[0],currCell[1]-1)
                elif d=='N':
                    childCell=(currCell[0]-1,currCell[1])
                elif d=='S':
                    childCell=(currCell[0]+1,currCell[1])
                if childCell in explored:
                    continue
                explored.append(childCell)
                frontier.append(childCell)
                dfsPath[childCell]=currCell
    fwdPath={}
    cell=(1,1)
    while cell!=start:
        fwdPath[dfsPath[cell]]=cell
        cell=dfsPath[cell]
    return dSearch, dfsPath ,fwdPath

def BFS(m):
    start=(m.rows,m.cols)
    frontier=[start]
    explored=[start]
    bSearch=[]
    bfsPath = {}
    while len(frontier)>0:
        currCell=frontier.pop(0)
        bSearch.append(currCell)
        if currCell==(1,1):
            break
        for d in 'ESNW':
            if m.maze_map[currCell][d]==True:
                if d=='E':
                    childCell=(currCell[0],currCell[1]+1)
                elif d=='W':
                     childCell=(currCell[0],currCell[1]-1)
                elif d=='N':
                     childCell=(currCell[0]-1,currCell[1])
                elif d=='S':
                     childCell=(currCell[0]+1,currCell[1])
                if childCell in explored:
                    continue
                frontier.append(childCell)
                explored.append(childCell)
                bfsPath[childCell]=currCell
    fwdPath={}
    cell=(1,1)
    while cell!=start:
        fwdPath[bfsPath[cell]]=cell
        cell=bfsPath[cell]
    return bSearch, bfsPath, fwdPath

from queue import PriorityQueue

def heuristic(cellA, cellB):
    x1, y1 = cellA
    x2, y2 = cellB
    return abs((x1-x2)+(y1-y2))

def aStar(m):
    start = (m.rows,m.cols)
    g_score = {cell:float('inf') for cell in m.grid}
    g_score[start]= 0
    f_score = {cell:float('inf') for cell in m.grid}
    f_score[start] = heuristic(start, (1,1))
    

    open=PriorityQueue()
    open.put((heuristic(start, (1,1)),heuristic(start, (1,1)),start))
    aPath={}
    aSearchPath= []
    while not open.empty():
        currCell=open.get()[2]
        aSearchPath.append(currCell)
        if currCell==(1,1):
            break
        for d in 'ESNW':
            if m.maze_map[currCell][d]==True:
                if d=='E':
                    childCell=(currCell[0],currCell[1]+1)
                elif d=='W':
                     childCell=(currCell[0],currCell[1]-1)
                elif d=='N':
                     childCell=(currCell[0]-1,currCell[1])
                elif d=='S':
                     childCell=(currCell[0]+1,currCell[1])
                
                temp_g_score=g_score[currCell]+1
                temp_f_score=temp_g_score+heuristic(childCell,(1,1))

                if temp_f_score< f_score[childCell]:
                    g_score[childCell]= temp_g_score
                    f_score[childCell]= temp_f_score
                    open.put((temp_f_score,heuristic(childCell,(1,1)), childCell))
                    aPath[childCell]= currCell
    fwdPath={}
    cell=(1,1)
    while cell!= start:
        fwdPath[aPath[cell]]=cell
        cell=aPath[cell]
    return aSearchPath, aPath, fwdPath
